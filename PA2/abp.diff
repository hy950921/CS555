59c59
< void printevlist(void);
---
> 
69,70d68
< int Layer5 = 0;
< int Ack = 1;
72,99c70,71
< int CheckSumming(const struct pkt packet) {
<     struct pkt p;
<     p = packet;
<     int CheckSum = 0;
<     for (int i = 0; i < sizeof(p.payload); i++) {
<         CheckSum += (unsigned char)p.payload[i];
<     }
<     CheckSum += p.seqnum;
<     CheckSum += p.acknum;
<     return CheckSum;
< }
< 
< struct Device {
<     int SeqNum;
<     int Next;
<     float Time;
<     int Ack;
<     struct pkt Packet;
< };
< struct Device A;
< struct Device B;
< 
< 
< void printHex(char* data) {
<     for (int i = 0; i < sizeof(data); i++)
<         printf("%X ", data[i]);
<     printf("\n");
< }
---
> 
> 
104,135d75
<     printf("A_output 1\n   A.Ack = %d, A.Next = %d, payloadsize = %lu\n", A.Ack, A.Next, sizeof(message.data));
<     if (A.Next == A.Ack) {
<         printf("   A_output ignores message:");
<         printHex(message.data);
<     }
<     else {
<         printf("   A_output is sending packet:");
<         printHex(message.data);
<         
< //         printf("   payload before reset: ");
<         printHex(A.Packet.payload);
<         memset(A.Packet.payload, 0, 20);
< //         printf("   payload after reset: ");
<         printHex(A.Packet.payload);
<         for (int i = 0; i < sizeof(message.data); i++) {
<             A.Packet.payload[i] = message.data[i];
<         }
<         printf("   payload: ");
<         printHex(A.Packet.payload);
<         A.Packet.seqnum = A.SeqNum;
<         A.Packet.acknum = A.Ack;
<         A.Packet.checksum = CheckSumming(A.Packet);
<         A.Next = A.Ack;
<     
<         tolayer3(0, A.Packet);
<         
<         starttimer(0, A.Time);
<         
< //         printevlist();
<     }
<     printf("   A values changed to: A.Ack = %d, A.Next = %d\n", A.Ack, A.Next);
< }
137,140d76
< int flipDigit(int d)
< {
<     if (d == 0) return 1;
<     else return 0;
146,155c82
<     printf("A_input 1\n    message: ");
<     printHex(packet.payload);
<     printf("    A.Ack = %d, A.Next = %d, payloadsize = %lu, acknum = %d\n", A.Ack, A.Next, sizeof(packet.payload), packet.acknum);
<     if (packet.checksum == CheckSumming(packet) && packet.acknum == A.Ack) {
<         printf("  checksum is good\n");
< //         A.Next = A.Ack;
<         stoptimer(0);
<         A.Ack = flipDigit(A.Ack);
<     }
<     printf("A_input 2 - A.Ack = %d, A.Next = %d\n", A.Ack, A.Next);
---
> 
161,167c88,89
<     printf("**timeout at A**\n");
<     printf("  Resending packet: ");
<     printHex(A.Packet.payload);
<     printf("  acknum = %d, A.Ack = %d, A.Next = %d\n", A.Packet.acknum, A.Ack, A.Next);
<     tolayer3(0, A.Packet);
<     starttimer(0, A.Time);
< }
---
> 
> }  
173,176c95
<     A.Next = 1;
<     A.SeqNum = 0;
<     A.Time = (float) 15.0;
<     A.Ack = 0;
---
> 
183,186c102
<     B.Next = 0;
<     B.SeqNum = 0;
<     B.Time = 5;
<     B.Ack = 1;
---
> 
192,215d107
<     printf("B_input\n    message: ");
<     printHex(packet.payload);
<     printf("    packet.acknum %d, B.Ack %d, B.Next %d\n", packet.acknum, B.Ack, B.Next);
<     
<     struct pkt output;
<     
<     if (packet.checksum == CheckSumming(packet) && packet.acknum == B.Next) {
<         printf("    Message is good\n");
<         tolayer5(1, packet.payload);
<         output.acknum = B.Next;
<         B.Next = B.Ack;
<         B.Ack = flipDigit(B.Ack);
<     }
<     else {
<         printf("    Message is bad\n");
<         output.acknum = B.Next;
<     }
<     
<     printf("   B_input sending ack %d\n", output.acknum);  
<     output.seqnum = packet.seqnum;
<     memset(output.payload, 0 , 20);
<     output.checksum = CheckSumming(output);
<         
<     tolayer3(1, output);
217d108
<     
222c113
< void B_output(struct msg message)
---
> void B_output(struct msg message)  
251c142
< #define  TIMER_INTERRUPT 0
---
> #define  TIMER_INTERRUPT 0  
263c154
< int nsim = 0;              /* number of messages from 5 to 4 so far */
---
> int nsim = 0;              /* number of messages from 5 to 4 so far */ 
268c159
< float lambda;              /* arrival rate of messages from layer 5 */
---
> float lambda;              /* arrival rate of messages from layer 5 */   
278c169
< 
---
>    
280,281c171,172
<    char c;
< 
---
>    char c; 
>   
285c176
< 
---
>    
309,311c200,202
<             /* fill in msg to give with string of same letter */
<             j = nsim % 26;
<             for (i=0; i<20; i++)
---
>             /* fill in msg to give with string of same letter */    
>             j = nsim % 26; 
>             for (i=0; i<20; i++)  
315c206
<                  for (i=0; i<20; i++)
---
>                  for (i=0; i<20; i++) 
320,321c211,212
<             if (eventptr->eventity == A)
<                A_output(msg2give);
---
>             if (eventptr->eventity == A) 
>                A_output(msg2give);  
323c214
<                B_output(msg2give);
---
>                B_output(msg2give);  
329c220
<             for (i=0; i<20; i++)
---
>             for (i=0; i<20; i++)  
338c229
<             if (eventptr->eventity == A)
---
>             if (eventptr->eventity == A) 
360,361c251,252
< 
< 
---
>   
>   
380c271
<     printf("It is likely that random number generation on your machine\n" );
---
>     printf("It is likely that random number generation on your machine\n" ); 
399c290
< float jimsrand(void)
---
> float jimsrand(void) 
402c293
<   float x;                   /* individual students may need to change mmm */
---
>   float x;                   /* individual students may need to change mmm */ 
405c296
< }
---
> }  
410c301
< 
---
>  
421c312
< 
---
>  
432c323
< }
---
> } 
441c332
<       printf("            INSERTEVENT: future time will be %lf\n",p->evtime);
---
>       printf("            INSERTEVENT: future time will be %lf\n",p->evtime); 
451c342
<               qold=q;
---
>               qold=q; 
495,496c386,387
<  for (q=evlist; q!=NULL ; q = q->next)
<     if ( (q->evtype==TIMER_INTERRUPT  && q->eventity==AorB) ) {
---
>  for (q=evlist; q!=NULL ; q = q->next) 
>     if ( (q->evtype==TIMER_INTERRUPT  && q->eventity==AorB) ) { 
528,529c419,420
<    for (q=evlist; q!=NULL ; q = q->next)
<     if ( (q->evtype==TIMER_INTERRUPT  && q->eventity==AorB) ) {
---
>    for (q=evlist; q!=NULL ; q = q->next)  
>     if ( (q->evtype==TIMER_INTERRUPT  && q->eventity==AorB) ) { 
533c424
< 
---
>  
540c431
< }
---
> } 
558c449
<       if (TRACE>0)
---
>       if (TRACE>0)    
561c452
<     }
---
>     }  
564c455
< /* to do something with the packet after we return back to him/her */
---
> /* to do something with the packet after we return back to him/her */ 
590,591c481,482
<  for (q=evlist; q!=NULL ; q = q->next)
<     if ( (q->evtype==FROM_LAYER3  && q->eventity==evptr->eventity) )
---
>  for (q=evlist; q!=NULL ; q = q->next) 
>     if ( (q->evtype==FROM_LAYER3  && q->eventity==evptr->eventity) ) 
594c485
< 
---
>  
606c497
<     if (TRACE>0)
---
>     if (TRACE>0)    
608c499
<     }
---
>     }  
610c501
<   if (TRACE>2)
---
>   if (TRACE>2)  
613c504
< }
---
> } 
617c508
<   int i;
---
>   int i;  
620c511
<      for (i=0; i<20; i++)
---
>      for (i=0; i<20; i++)  
624c515
< 
---
>   
